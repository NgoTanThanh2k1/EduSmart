import React, { useState, useRef, useEffect } from "react";
import {
  Box,
  Paper,
  TextField,
  IconButton,
  Typography,
  Avatar,
  Chip,
  Fade,
  Slide,
  Collapse,
  Divider,
} from "@mui/material";
import {
  Send,
  SmartToy,
  Person,
  Close,
  ExpandMore,
  ExpandLess,
  Psychology,
} from "@mui/icons-material";
import { useCart } from "../hooks/useCart";
import { useFavorites } from "../hooks/useFavorites";

const AIChatbot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [inputValue, setInputValue] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef(null);
  const { items: cartItems } = useCart();
  const { items: favorites } = useFavorites();

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Mock AI responses based on user input and context
  const generateAIResponse = async (userMessage) => {
    setIsTyping(true);

    // Simulate API delay
    await new Promise((resolve) =>
      setTimeout(resolve, 1000 + Math.random() * 2000)
    );

    const lowerMessage = userMessage.toLowerCase();
    let response = "";

    // Analyze user preferences from context
    const hasCartItems = cartItems.length > 0;
    const hasFavorites = favorites.length > 0;

    if (
      lowerMessage.includes("ti·∫øng anh") ||
      lowerMessage.includes("english")
    ) {
      response =
        "T√¥i th·∫•y b·∫°n quan t√¢m ƒë·∫øn ti·∫øng Anh! D·ª±a tr√™n s·ªü th√≠ch c·ªßa b·∫°n, t√¥i g·ª£i √Ω:\n\n" +
        "üéØ **Kh√≥a h·ªçc ph√π h·ª£p:**\n" +
        "‚Ä¢ Ti·∫øng Anh giao ti·∫øp c∆° b·∫£n\n" +
        "‚Ä¢ IELTS Speaking Masterclass\n" +
        "‚Ä¢ Business English for Professionals\n\n" +
        "üí° **L·ªùi khuy√™n:** B·∫Øt ƒë·∫ßu v·ªõi kh√≥a h·ªçc giao ti·∫øp c∆° b·∫£n n·∫øu b·∫°n m·ªõi h·ªçc, ho·∫∑c IELTS n·∫øu b·∫°n c·∫ßn ch·ª©ng ch·ªâ.";
    } else if (
      lowerMessage.includes("l·∫≠p tr√¨nh") ||
      lowerMessage.includes("programming")
    ) {
      response =
        "Tuy·ªát v·ªùi! L·∫≠p tr√¨nh l√† lƒ©nh v·ª±c r·∫•t hot hi·ªán nay. ƒê√¢y l√† g·ª£i √Ω c·ªßa t√¥i:\n\n" +
        "üöÄ **Kh√≥a h·ªçc ph√π h·ª£p:**\n" +
        "‚Ä¢ JavaScript c∆° b·∫£n ƒë·∫øn n√¢ng cao\n" +
        "‚Ä¢ React.js cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu\n" +
        "‚Ä¢ Python cho Data Science\n" +
        "‚Ä¢ Node.js Backend Development\n\n" +
        "üí° **L·ªùi khuy√™n:** N·∫øu b·∫°n m·ªõi h·ªçc, h√£y b·∫Øt ƒë·∫ßu v·ªõi JavaScript ho·∫∑c Python.";
    } else if (lowerMessage.includes("gi√°") || lowerMessage.includes("price")) {
      response =
        "V·ªÅ gi√° c·∫£, ch√∫ng t√¥i c√≥ nhi·ªÅu m·ª©c gi√° ph√π h·ª£p:\n\n" +
        "üí∞ **Ph√¢n kh√∫c gi√°:**\n" +
        "‚Ä¢ D∆∞·ªõi 500k: Kh√≥a h·ªçc c∆° b·∫£n\n" +
        "‚Ä¢ 500k - 1M: Kh√≥a h·ªçc trung c·∫•p\n" +
        "‚Ä¢ 1M - 2M: Kh√≥a h·ªçc n√¢ng cao\n" +
        "‚Ä¢ Tr√™n 2M: Kh√≥a h·ªçc chuy√™n s√¢u\n\n" +
        "üí° **L·ªùi khuy√™n:** B·∫°n c√≥ th·ªÉ th·ª≠ kh√≥a h·ªçc mi·ªÖn ph√≠ tr∆∞·ªõc khi mua!";
    } else if (
      lowerMessage.includes("gi·ªè h√†ng") ||
      lowerMessage.includes("cart")
    ) {
      if (hasCartItems) {
        response =
          `T√¥i th·∫•y b·∫°n c√≥ ${cartItems.length} kh√≥a h·ªçc trong gi·ªè h√†ng:\n\n` +
          cartItems.map((item) => `‚Ä¢ ${item.name}`).join("\n") +
          "\n\n" +
          "üí° **G·ª£i √Ω:** B·∫°n c√≥ mu·ªën t√¥i t√¨m th√™m kh√≥a h·ªçc b·ªï sung kh√¥ng?";
      } else {
        response =
          "Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng. H√£y ƒë·ªÉ t√¥i g·ª£i √Ω m·ªôt s·ªë kh√≥a h·ªçc ph·ªï bi·∫øn:\n\n" +
          "üî• **Kh√≥a h·ªçc hot:**\n" +
          "‚Ä¢ React.js Masterclass\n" +
          "‚Ä¢ IELTS 7.0+ Preparation\n" +
          "‚Ä¢ Data Science Fundamentals\n" +
          "‚Ä¢ Digital Marketing Complete";
      }
    } else if (
      lowerMessage.includes("y√™u th√≠ch") ||
      lowerMessage.includes("favorite")
    ) {
      if (hasFavorites) {
        response =
          `T√¥i th·∫•y b·∫°n c√≥ ${favorites.length} kh√≥a h·ªçc y√™u th√≠ch. D·ª±a tr√™n ƒë√≥, t√¥i g·ª£i √Ω:\n\n` +
          "üéØ **Kh√≥a h·ªçc t∆∞∆°ng t·ª±:**\n" +
          "‚Ä¢ Advanced JavaScript Patterns\n" +
          "‚Ä¢ React Performance Optimization\n" +
          "‚Ä¢ TypeScript Mastery\n\n" +
          "üí° **L·ªùi khuy√™n:** Nh·ªØng kh√≥a h·ªçc n√†y s·∫Ω n√¢ng cao k·ªπ nƒÉng c·ªßa b·∫°n!";
      } else {
        response =
          "B·∫°n ch∆∞a c√≥ kh√≥a h·ªçc y√™u th√≠ch n√†o. H√£y kh√°m ph√° v√† ƒë√°nh d·∫•u y√™u th√≠ch nh·ªØng kh√≥a h·ªçc b·∫°n quan t√¢m!";
      }
    } else {
      response =
        "Xin ch√†o! T√¥i l√† AI tr·ª£ l√Ω c·ªßa EduSmart. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\n" +
        "ü§ñ **T√¥i c√≥ th·ªÉ:**\n" +
        "‚Ä¢ G·ª£i √Ω kh√≥a h·ªçc ph√π h·ª£p\n" +
        "‚Ä¢ T∆∞ v·∫•n v·ªÅ l·ªô tr√¨nh h·ªçc\n" +
        "‚Ä¢ Gi·∫£i ƒë√°p th·∫Øc m·∫Øc v·ªÅ gi√°\n" +
        "‚Ä¢ Ph√¢n t√≠ch s·ªü th√≠ch c·ªßa b·∫°n\n\n" +
        "üí° **H√£y h·ªèi t√¥i:**\n" +
        '‚Ä¢ "T√¥i mu·ªën h·ªçc ti·∫øng Anh"\n' +
        '‚Ä¢ "G·ª£i √Ω kh√≥a h·ªçc l·∫≠p tr√¨nh"\n' +
        '‚Ä¢ "Kh√≥a h·ªçc n√†o ph√π h·ª£p v·ªõi t√¥i?"';
    }

    setIsTyping(false);
    return response;
  };

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;

    const userMessage = inputValue.trim();
    setInputValue("");

    // Add user message
    const newUserMessage = {
      id: Date.now(),
      text: userMessage,
      sender: "user",
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, newUserMessage]);

    // Generate AI response
    const aiResponse = await generateAIResponse(userMessage);

    const newAIMessage = {
      id: Date.now() + 1,
      text: aiResponse,
      sender: "ai",
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, newAIMessage]);
  };

  const handleKeyPress = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const quickSuggestions = [
    "G·ª£i √Ω kh√≥a h·ªçc ti·∫øng Anh",
    "Kh√≥a h·ªçc l·∫≠p tr√¨nh n√†o hot?",
    "T∆∞ v·∫•n v·ªÅ gi√° kh√≥a h·ªçc",
    "Kh√≥a h·ªçc ph√π h·ª£p v·ªõi t√¥i",
  ];

  return (
    <>
      {/* Chat Toggle Button */}
      <Box
        sx={{
          position: "fixed",
          bottom: 20,
          right: 20,
          zIndex: 1000,
        }}
      >
        <Slide direction="up" in={!isOpen} timeout={300}>
          <IconButton
            onClick={() => setIsOpen(true)}
            sx={{
              width: 60,
              height: 60,
              backgroundColor: "primary.main",
              color: "white",
              boxShadow: 3,
              "&:hover": {
                backgroundColor: "primary.dark",
                transform: "scale(1.1)",
              },
              transition: "all 0.3s ease",
            }}
          >
            <SmartToy sx={{ fontSize: 28 }} />
          </IconButton>
        </Slide>
      </Box>

      {/* Chat Window */}
      <Slide direction="up" in={isOpen} timeout={300}>
        <Paper
          elevation={8}
          sx={{
            position: "fixed",
            bottom: 20,
            right: 20,
            width: 400,
            height: 600,
            zIndex: 1001,
            display: "flex",
            flexDirection: "column",
            borderRadius: 3,
            overflow: "hidden",
          }}
        >
          {/* Header */}
          <Box
            sx={{
              p: 2,
              backgroundColor: "primary.main",
              color: "white",
              display: "flex",
              alignItems: "center",
              justifyContent: "space-between",
            }}
          >
            <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
              <Avatar sx={{ bgcolor: "white", color: "primary.main" }}>
                <SmartToy />
              </Avatar>
              <Box>
                <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                  AI Tr·ª£ l√Ω EduSmart
                </Typography>
                <Typography variant="caption" sx={{ opacity: 0.8 }}>
                  {isTyping ? "ƒêang nh·∫≠p..." : "Tr·ª±c tuy·∫øn"}
                </Typography>
              </Box>
            </Box>
            <IconButton
              onClick={() => setIsOpen(false)}
              sx={{ color: "white" }}
            >
              <Close />
            </IconButton>
          </Box>

          {/* Messages */}
          <Box
            sx={{
              flex: 1,
              overflow: "auto",
              p: 2,
              backgroundColor: "#f8f9fa",
            }}
          >
            {messages.length === 0 ? (
              <Box sx={{ textAlign: "center", py: 4 }}>
                <SmartToy
                  sx={{ fontSize: 48, color: "text.secondary", mb: 2 }}
                />
                <Typography variant="h6" color="text.secondary" gutterBottom>
                  Xin ch√†o! üëã
                </Typography>
                <Typography
                  variant="body2"
                  color="text.secondary"
                  sx={{ mb: 3 }}
                >
                  T√¥i l√† AI tr·ª£ l√Ω, c√≥ th·ªÉ gi√∫p b·∫°n t√¨m kh√≥a h·ªçc ph√π h·ª£p
                </Typography>

                {/* Quick Suggestions */}
                <Box sx={{ display: "flex", flexDirection: "column", gap: 1 }}>
                  {quickSuggestions.map((suggestion, index) => (
                    <Chip
                      key={index}
                      label={suggestion}
                      onClick={() => setInputValue(suggestion)}
                      sx={{
                        cursor: "pointer",
                        "&:hover": {
                          backgroundColor: "primary.light",
                          color: "white",
                        },
                      }}
                    />
                  ))}
                </Box>
              </Box>
            ) : (
              <Box sx={{ display: "flex", flexDirection: "column", gap: 2 }}>
                {messages.map((message) => (
                  <Fade in key={message.id} timeout={300}>
                    <Box
                      sx={{
                        display: "flex",
                        justifyContent:
                          message.sender === "user" ? "flex-end" : "flex-start",
                      }}
                    >
                      <Box
                        sx={{
                          maxWidth: "80%",
                          p: 2,
                          borderRadius: 2,
                          backgroundColor:
                            message.sender === "user"
                              ? "primary.main"
                              : "white",
                          color:
                            message.sender === "user"
                              ? "white"
                              : "text.primary",
                          boxShadow: 1,
                        }}
                      >
                        <Typography
                          variant="body2"
                          sx={{
                            whiteSpace: "pre-line",
                            lineHeight: 1.5,
                          }}
                        >
                          {message.text}
                        </Typography>
                        <Typography
                          variant="caption"
                          sx={{
                            display: "block",
                            mt: 1,
                            opacity: 0.7,
                            textAlign: "right",
                          }}
                        >
                          {message.timestamp.toLocaleTimeString()}
                        </Typography>
                      </Box>
                    </Box>
                  </Fade>
                ))}

                {isTyping && (
                  <Box sx={{ display: "flex", justifyContent: "flex-start" }}>
                    <Box
                      sx={{
                        p: 2,
                        borderRadius: 2,
                        backgroundColor: "white",
                        boxShadow: 1,
                      }}
                    >
                      <Box
                        sx={{ display: "flex", alignItems: "center", gap: 1 }}
                      >
                        <Box
                          sx={{
                            width: 8,
                            height: 8,
                            borderRadius: "50%",
                            backgroundColor: "grey.400",
                            animation: "pulse 1.5s infinite",
                            "@keyframes pulse": {
                              "0%": { opacity: 1 },
                              "50%": { opacity: 0.3 },
                              "100%": { opacity: 1 },
                            },
                          }}
                        />
                        <Box
                          sx={{
                            width: 8,
                            height: 8,
                            borderRadius: "50%",
                            backgroundColor: "grey.400",
                            animation: "pulse 1.5s infinite 0.2s",
                          }}
                        />
                        <Box
                          sx={{
                            width: 8,
                            height: 8,
                            borderRadius: "50%",
                            backgroundColor: "grey.400",
                            animation: "pulse 1.5s infinite 0.4s",
                          }}
                        />
                      </Box>
                    </Box>
                  </Box>
                )}
              </Box>
            )}
            <div ref={messagesEndRef} />
          </Box>

          {/* Input */}
          <Box
            sx={{
              p: 2,
              backgroundColor: "white",
              borderTop: 1,
              borderColor: "divider",
            }}
          >
            <Box sx={{ display: "flex", gap: 1 }}>
              <TextField
                fullWidth
                placeholder="Nh·∫≠p tin nh·∫Øn..."
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyPress={handleKeyPress}
                disabled={isTyping}
                size="small"
                sx={{
                  "& .MuiOutlinedInput-root": {
                    borderRadius: 2,
                  },
                }}
              />
              <IconButton
                onClick={handleSendMessage}
                disabled={!inputValue.trim() || isTyping}
                sx={{
                  backgroundColor: "primary.main",
                  color: "white",
                  "&:hover": {
                    backgroundColor: "primary.dark",
                  },
                  "&:disabled": {
                    backgroundColor: "grey.300",
                  },
                }}
              >
                <Send />
              </IconButton>
            </Box>
          </Box>
        </Paper>
      </Slide>
    </>
  );
};

export default AIChatbot;
